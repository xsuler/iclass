<style lang="less">
.calendar {
  background: white;
  border-radius: 16rpx;
  padding: 24rpx;

  .calendar-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 16rpx 0;
    margin-bottom: 8rpx;
    
    .nav-button {
      width: 60rpx;
      height: 60rpx;
      display: flex;
      align-items: center;
      justify-content: center;
      font-size: 32rpx;
      color: #3B82F6;
      background: #EFF6FF;
      border-radius: 50%;
      cursor: pointer;
      
      &:active {
        opacity: 0.8;
      }
    }
    
    .month-year {
      font-size: 32rpx;
      font-weight: bold;
      color: #1F2937;
    }
  }

  .weekdays {
    display: flex;
    justify-content: space-around;
    margin-bottom: 8rpx;
    
    .weekday {
      width: 14.28%;
      text-align: center;
      font-size: 28rpx;
      color: #6B7280;
      padding: 8rpx 0;
    }
  }
  
  .days-grid {
    display: flex;
    flex-wrap: wrap;
    margin-top: 0;
    
    .day {
      width: 14.28%;
      padding: 12rpx 0;
      text-align: center;
      position: relative;
      
      text {
        font-size: 28rpx;
        color: #1F2937;
      }
      
      &.empty {
        pointer-events: none;
      }
      
        .course-list {
          width: 100%;
          margin-top: 8rpx;
          display: flex;
          flex-direction: column;
          gap: 4rpx;
          color: #2E7D32;
        }
        
        .course-name {
          width: 100%;
          font-size: 20rpx;
          padding: 4rpx 6rpx;
          background: #E8F5E9;
          border-radius: 4rpx;
          color: #2E7D32;
          line-height: 1.2;
          text-align: center;
          word-break: break-all;
        }
      
      .course-name {
        background: #C8E6C9;
        color: #1B5E20;
      }
      
      &.today {
        color: #2E7D32;
        font-weight: bold;
        
        &::after {
          content: '';
          position: absolute;
          bottom: 12rpx;
          width: 8rpx;
          height: 8rpx;
          border-radius: 50%;
          background: #2E7D32;
        }
      }
      
      .event-dot {
        width: 8rpx;
        height: 8rpx;
        border-radius: 50%;
        background: #3B82F6;
        margin-top: 8rpx;
      }
      
      &::after {
        display: none;
      }
    }
  }
}

.course-popup {
  position: fixed;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  background: rgba(0, 0, 0, 0.5);
  z-index: 10000;
  display: flex;
  justify-content: center;
  align-items: center;

  .popup-content {
    width: 80%;
    background: white;
    border-radius: 16rpx;
    padding: 32rpx;
    
    .popup-header {
      font-size: 32rpx;
      font-weight: bold;
      color: #1F2937;
      margin-bottom: 24rpx;
    }
    
    .info-item {
      display: flex;
      margin-bottom: 16rpx;
      
      .stars {
        color: #FFB800;
        font-size: 32rpx;
      }

      .label {
        width: 160rpx;
        color: #6B7280;
        font-size: 28rpx;
      }
      
      .value {
        flex: 1;
        color: #1F2937;
        font-size: 28rpx;
      }
    }
    
    .close-btn {
      margin-top: 32rpx;
      width: 100%;
      height: 80rpx;
      background: #E8F5E9;
      color: #2E7D32;
      border-radius: 8rpx;
      display: flex;
      align-items: center;
      justify-content: center;
      font-size: 28rpx;
      
      &:active {
        opacity: 0.8;
      }
    }
  }
}
</style>

<template>
  <view class="calendar">
    <view class="calendar-header">
      <view class="nav-button" @tap="prevMonth">
        <text>〈</text>
      </view>
      <text class="month-year">{{currentYear}}年{{currentMonth + 1}}月</text>
      <view class="nav-button" @tap="nextMonth">
        <text>〉</text>
      </view>
    </view>

    <view class="weekdays">
      <text wx:for="{{weekDays}}" 
            wx:key="index" 
            class="weekday">{{item}}</text>
    </view>
    
    <view class="days-grid">
      <view wx:for="{{days}}" 
            wx:key="index"
            class="day {{item.empty ? 'empty' : ''}} {{item.hasEvent ? 'has-event' : ''}} {{item.checked ? 'checked' : ''}} {{item.isToday ? 'today' : ''}} {{item.isPast ? 'past' : ''}}"
            data-index="{{index}}"
            @tap="handleDayTap">
        <text>{{item.day}}</text>
        <view wx:if="{{item.hasEvent}}" class="course-list">
          <view wx:for="{{item.events}}" 
                wx:for-item="event" 
                wx:key="index" 
                class="course-name"
                data-day-index="{{index}}"
                data-course-index="{{index}}"
                data-date="{{item.date}}"
                @tap.native.stop="handleCourseClick">
            {{event.class_name}}
          </view>
        </view>
      </view>
    </view>
  </view>

  <view class="course-popup" wx:if="{{showPopup}}">
    <view class="popup-content">
      <view class="popup-header">课程详情</view>
      <view class="info-item">
        <text class="label">课程名称：</text>
        <text class="value">{{selectedCourse.class_name}}</text>
      </view>
      <view class="info-item">
        <text class="label">上课日期：</text>
        <text class="value">{{selectedCourse.class_date}}</text>
      </view>
      <view class="info-item">
        <text class="label">上课时间：</text>
        <text class="value">{{selectedCourse.class_time}}</text>
      </view>
      <view class="info-item">
        <text class="label">上课地点：</text>
        <text class="value">{{selectedCourse.class_location}}</text>
      </view>
      <view class="info-item">
        <text class="label">授课教师：</text>
        <text class="value">{{selectedCourse.class_instructor}}</text>
      </view>
      <view class="info-item">
        <text class="label">课程评分：</text>
        <text class="value stars">{{selectedCourse.stars}}</text>
      </view>

      <view class="close-btn" @tap="closePopup">关闭</view>
    </view>
  </view>
</template>

<script>
import wepy from '@wepy/core'

wepy.component({
  props: {
    events: {
      type: Array,
      default: () => []
    }
  },

  data: {
    weekDays: ['日', '一', '二', '三', '四', '五', '六'],
    currentYear: new Date().getFullYear(),
    currentMonth: new Date().getMonth(),
    days: [],
    showPopup: false,
    selectedCourse: null
  },

  methods: {
    prevMonth() {
      if (this.currentMonth === 0) {
        this.currentYear--
        this.currentMonth = 11
      } else {
        this.currentMonth--
      }
      this.generateCalendar()
    },

    nextMonth() {
      if (this.currentMonth === 11) {
        this.currentYear++
        this.currentMonth = 0
      } else {
        this.currentMonth++
      }
      this.generateCalendar()
    },

    generateCalendar() {
      const firstDay = new Date(this.currentYear, this.currentMonth, 1).getDay()
      const daysInMonth = new Date(this.currentYear, this.currentMonth + 1, 0).getDate()
      const today = this.formatDateToChineseFormat(new Date())
      
      const days = []
      for (let i = 0; i < firstDay; i++) {
        days.push({ 
          day: '', 
          events: [],
          hasEvent: false,
          checked: false,
          isToday: false,
          isPast: false
        })
      }
      
      for (let day = 1; day <= daysInMonth; day++) {
        const date = this.formatDateToChineseFormat(new Date(this.currentYear, this.currentMonth, day))
        const dayEvents = this.events.filter(event => {
          const eventDateStr = event.class_date || event.date || ''
          const eventDate = eventDateStr.slice(0, 5)  // Take first 5 chars (MM.DD)
          return eventDate === date && event.checked
        })
        
        const isPast = new Date(this.currentYear, this.currentMonth, day) < new Date()
        
        days.push({ 
          day, 
          date,
          events: dayEvents,
          hasEvent: dayEvents.length > 0,
          checked: dayEvents.some(e => e.checked),
          isToday: date === today,
          isPast: isPast
        })
      }
      
      this.days = days
    },

    formatDateToChineseFormat(date) {
      const month = String(date.getMonth() + 1).padStart(2, '0')
      const day = String(date.getDate()).padStart(2, '0')
      return `${month}.${day}`
    },

    handleDayTap(e) {
      const index = e.currentTarget.dataset.index
      const day = this.days[index]
      
      // Skip empty days
      if (!day || day.empty) {
        return
      }
      
      // Emit day select event with the date
      this.$emit('daySelect', day.date)
    },

    handleCourseClick(e) {
      const dayIndex = e.currentTarget.dataset.dayIndex
      const courseIndex = e.currentTarget.dataset.courseIndex
      const date = e.currentTarget.dataset.date
      
      // Find the day that matches the date
      const day = this.days.find(d => d.date === date)
      if (!day) return
      
      const course = day.events[courseIndex]
      
      this.selectedCourse = {
        class_name: course.class_name || course.title,
        class_date: course.class_date || course.date,
        class_time: course.class_time || course.time,
        class_location: course.class_location || course.location,
        class_instructor: course.class_instructor || course.instructor,
        stars: '⭐'.repeat(course.class_score_stars || 0)
      }
      
      this.showPopup = true
      // Emit event to notify parent that popup is shown
      this.$emit('popupVisibilityChange', true)
    },

    closePopup() {
      this.showPopup = false
      this.selectedCourse = null
      // Emit event to notify parent that popup is hidden
      this.$emit('popupVisibilityChange', false)
    }
  },

  watch: {
    events: {
      handler(newVal) {
        if (Array.isArray(newVal)) {
          this.generateCalendar()
        }
      },
      immediate: true
    }
  },

  onLoad() {
    this.generateCalendar()
  }
})
</script> 