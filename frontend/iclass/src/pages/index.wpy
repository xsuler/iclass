<style lang="less">
.dashboard-page {
  padding: 20rpx;
  min-height: 100vh;
  background: #F8FAFC;
  
  .header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 20rpx;
    
    .page-title {
      font-size: 36rpx;
      font-weight: bold;
      color: #1F2937;
    }
    
    .upload-btn {
      background: #3B82F6;
      color: white;
      padding: 12rpx 24rpx;
      border-radius: 8rpx;
      font-size: 28rpx;
      display: flex;
      align-items: center;
      
      &:active {
        opacity: 0.9;
      }
      
      .icon {
        margin-right: 8rpx;
        font-weight: bold;
      }
    }
  }
  
  .stats-grid {
    display: flex;
    justify-content: space-between;
    margin-bottom: 20rpx;
    
    .stat-card {
      flex: 1;
      background: #fff;
      border-radius: 16rpx;
      padding: 24rpx;
      margin: 0 10rpx;
      box-shadow: 0 4rpx 12rpx rgba(0,0,0,0.05);
      
      text {
        font-size: 28rpx;
        color: #1F2937;
      }
    }
  }
  
  .calendar-section {
    background: #fff;
    border-radius: 16rpx;
    margin-bottom: 20rpx;
    box-shadow: 0 4rpx 12rpx rgba(0,0,0,0.05);
    overflow: hidden;
  }
  
  .today-courses {
    background: #fff;
    border-radius: 16rpx;
    padding: 24rpx;
    box-shadow: 0 4rpx 12rpx rgba(0,0,0,0.05);
    
    .section-header {
      display: flex;
      justify-content: space-between;
      align-items: center;
      margin-bottom: 16rpx;
      
      .section-title {
        font-size: 32rpx;
        font-weight: bold;
        color: #1F2937;
      }
      
      .back-to-today {
        font-size: 24rpx;
        color: #3B82F6;
        background: #EFF6FF;
        padding: 8rpx 16rpx;
        border-radius: 8rpx;
        
        &:active {
          opacity: 0.8;
        }
      }
    }
    
    .course-item {
      padding: 24rpx;
      border-bottom: 1rpx solid #eee;
      display: flex;
      align-items: flex-start;
      transition: all 0.3s ease;
      
      &:active {
        background: #F3F4F6;
      }
      
      &.past {
        opacity: 1;
        background: #F3F4F6;
        .time { 
          color: #64748B !important; 
        }
        
        .title {
          color: #64748B !important;
        }
        
        .location, .instructor {
          color: #94A3B8 !important;
        }
      }
      
      &.checked {
        background: #F0FDF4;
        
        .time {
          color: #059669;
          position: relative;
          
          &::after {
            content: '‚úì';
            margin-left: 8rpx;
            color: #059669;
          }
        }
        
        .title {
          color: #059669;
        }
        
        .location, .instructor {
          color: #065F46;
        }
      }
      
      .time {
        font-size: 28rpx;
        color: #3B82F6;
        font-weight: bold;
        margin-right: 24rpx;
        min-width: 140rpx;
      }
      
      .details {
        flex: 2;
        
        .title {
          font-size: 30rpx;
          font-weight: 500;
          color: #1F2937;
          margin-bottom: 8rpx;
          display: block;
        }
        
        .location {
          font-size: 24rpx;
          color: #6B7280;
        }
      }
      
      .instructor {
        font-size: 24rpx;
        color: #6B7280;
        margin-left: 24rpx;
      }
      
      &:last-child {
        border-bottom: none;
      }
    }
    
    .no-courses {
      text-align: center;
      padding: 48rpx 0;
      color: #6B7280;
      font-size: 28rpx;
    }
  }
}

.stats-section {
  background: white;
  border-radius: 16rpx;
  padding: 24rpx;
  margin-bottom: 20rpx;
  box-shadow: 0 4rpx 12rpx rgba(0,0,0,0.05);

  .section-title {
    font-size: 32rpx;
    font-weight: bold;
    color: #1F2937;
    margin-bottom: 16rpx;
  }

  .chart-container {
    margin-top: 24rpx;
    
    .chart-header {
      display: flex;
      justify-content: space-between;
      align-items: center;
      margin-bottom: 16rpx;
      
      .chart-title {
        font-size: 28rpx;
        color: #4B5563;
      }
      
      .period-selector {
        display: flex;
        gap: 16rpx;
        
        .period-btn {
          padding: 8rpx 16rpx;
          font-size: 24rpx;
          border-radius: 8rpx;
          background: #F3F4F6;
          color: #4B5563;
          
          &.active {
            background: #3B82F6;
            color: white;
          }
        }
      }
    }
    
    .chart-wrapper {
      width: 100%;
      height: 180px;
      position: relative;
      z-index: 1;
    }
  }
}

:deep(.ec-canvas) {
  width: 100%;
  height: 100%;
  position: absolute;
  top: 0;
  left: 0;
}
</style>

<template>
  <view class="dashboard-page">
    <!-- Header with title and upload button -->
    <view class="header">
      <text class="page-title">ÂÅ•Â∫∑ËØæÁ®ãÁÆ°ÁêÜ</text>
      <view class="upload-btn" @tap="openUpload">
        <text class="icon">+</text>
        <text>Ê∑ªÂä†ËØæÁ®ã</text>
      </view>
    </view>
  
    <!-- ÁªüËÆ°Âç°Áâá -->
    <view class="stats-grid">
      <view class="stat-card">
        <text>ÊÄªËØæÁ®ãÊï∞: {{stats.totalCourses}}</text>
      </view>
      <view class="stat-card">
        <text>Â∑≤ÊâìÂç°: {{stats.completedCourses}}</text>
      </view>
    </view>

    <!-- ÊâìÂç°ÁªüËÆ° -->
    <view class="stats-section" style="display: block">
      <text class="section-title">ÊâìÂç°ÁªüËÆ°</text>
      <view class="chart-container">
        <view class="chart-header">
          <text class="chart-title">{{periodTitle}}</text>
          <view class="period-selector">
            <view 
              class="period-btn {{period === 'day' ? 'active' : ''}}" 
              @tap="setPeriod('day')">Êó•</view>
            <view 
              class="period-btn {{period === 'week' ? 'active' : ''}}" 
              @tap="setPeriod('week')">Âë®</view>
            <view 
              class="period-btn {{period === 'month' ? 'active' : ''}}" 
              @tap="setPeriod('month')">Êúà</view>
          </view>
        </view>
        <view class="chart-wrapper">
          <ec-canvas id="mychart-dom" canvas-id="mychart" :ec="ec"></ec-canvas>
        </view>
      </view>
    </view>


    <!-- Êó•ÂéÜÊ®°Âùó -->
    <view class="calendar-section">
      <calendar :events="courseEvents" @checkin="handleCheckIn" @daySelect="handleDaySelect" @popupVisibilityChange="handlePopupVisibilityChange" />
    </view>

    <!-- ‰ªäÊó•ËØæÁ®ã -->
    <view class="today-courses">
      <view class="section-header">
        <text class="section-title">{{sectionTitle}}</text>
      </view>
      <block wx:if="{{todayCourses.length > 0}}">
        <view wx:for="{{todayCourses}}" 
              wx:key="index" 
              class="course-item {{item._isPast ? 'past' : ''}} {{item.checked ? 'checked' : ''}}"
              data-item="{{index}}"
              @tap="onCourseItemTap">
          <text class="time">{{item.class_time || item.time}}</text>
          <view class="details">
            <text class="title">{{item.class_name || item.title}}</text>
            <text wx:if="{{item.class_location}}" class="location">üìç {{item.class_location}}</text>
          </view>
          <text wx:if="{{item.class_instructor}}" class="instructor">üë§ {{item.class_instructor}}</text>
        </view>
      </block>
      <view wx:else class="no-courses">
        <text>‰ªäÂ§©Ê≤°ÊúâËØæÁ®ãÂÆâÊéí</text>
      </view>
    </view>

    <image-upload-dialog 
      :isOpen.sync="showUploadDialog"
      @close="closeUpload"
      @upload="handleUpload"
    />
  </view>
</template>

<script>
import * as echarts from '../ec-canvas/echarts'
import wepy from '@wepy/core'

wepy.page({
  data: {
    courseEvents: [],
    showUploadDialog: false,
    selectedDate: null,
    isPopupVisible: false,
    stats: {
      totalCourses: 0,
      completedCourses: 0
    },
    period: 'day',
    periodTitle: 'ÊúÄËøë7Â§©ÊâìÂç°Áéá',
    ec: {
      onInit: (canvas, width, height, dpr) => {
        // Initialize the chart
        const chart = echarts.init(canvas, null, {
          width: width,
          height: height,
          devicePixelRatio: dpr,
        });
        canvas.setChart(chart);
        
        const option = {
          grid: {
            top: 30,
            right: 10,
            bottom: 10,
            left: 10,
            containLabel: true,
            show: false
          },
          xAxis: {
            type: 'category',
            boundaryGap: false,
            data: [],
            axisLine: {
              lineStyle: {
                color: '#4B5563'
              }
            },
            axisLabel: {
              color: '#4B5563',
              fontSize: 10
            }
          },
          yAxis: {
            type: 'value',
            min: 0,
            max: 100,
            interval: 20,
            axisLabel: {
              formatter: '{value}%',
              color: '#4B5563',
              fontSize: 10
            },
            splitLine: {
              show: false,
              lineStyle: {
                color: '#E5E7EB'
              }
            }
          },
          series: [{
            data: [],
            type: 'line',
            smooth: true,
            symbol: 'circle',
            symbolSize: 8,
            itemStyle: {
              color: '#3B82F6'
            },
            lineStyle: {
              color: '#3B82F6',
              width: 2
            },
            areaStyle: {
              color: {
                type: 'linear',
                x: 0,
                y: 0,
                x2: 0,
                y2: 1,
                colorStops: [{
                  offset: 0,
                  color: 'rgba(59, 130, 246, 0.2)'
                }, {
                  offset: 1,
                  color: 'rgba(59, 130, 246, 0)'
                }]
              }
            }
          }]
        };
        
        chart.setOption(option);
        // Store chart instance in a global property
        getApp().globalData.chart = chart;
        return chart;
      }
    }
  },

  computed: {
    todayCourses() {
      const targetDate = this.selectedDate || this.formatDateToChineseFormat(new Date())
      
      
      return this.courseEvents.filter(course => {
        const courseDateStr = course.class_date || course.date || ''
        const cleanDate = courseDateStr.slice(0, 5)
        return cleanDate === targetDate
      }).sort((a, b) => {
        const getTime = (t) => parseInt((t.class_time || t.time || '00:00').replace(':', ''))
        return getTime(a) - getTime(b)
      }).map(course => ({
        ...course,
        _isPast: this.isEventPast(course)  // Pre-calculate isPast status
      }))
    },
    
    sectionTitle() {
      if (!this.selectedDate) {
        return '‰ªäÊó•ËØæÁ®ã'
      }
      
      const today = this.formatDateToChineseFormat(new Date())
      if (this.selectedDate === today) {
        return '‰ªäÊó•ËØæÁ®ã'
      }
      
      return `${this.selectedDate} ËØæÁ®ã`
    }
  },

  methods: {
    formatDateToChineseFormat(date) {
      const month = String(date.getMonth() + 1).padStart(2, '0')
      const day = String(date.getDate()).padStart(2, '0')
      return `${month}.${day}`
    },

    openUpload() {
      this.showUploadDialog = true
      
      // Hide chart lines when upload dialog is open
      const chart = getApp().globalData.chart;
      if (!chart) return;
      
      // When upload dialog is visible, clear the chart data and hide axis lines
      chart.setOption({
        xAxis: {
          axisLine: { show: false },
          axisLabel: { show: false },
          data: []
        },
        yAxis: {
          axisLine: { show: false },
          axisLabel: { show: false },
          splitLine: { show: false }
        },
        series: [{
          data: []
        }]
      });
    },
    
    closeUpload() {
      this.showUploadDialog = false
      
      // Restore chart lines when upload dialog is closed
      const chart = getApp().globalData.chart;
      if (!chart) return;
      
      // When upload dialog is hidden, restore the chart data and axis lines
      const baseOption = {
        xAxis: {
          axisLine: { 
            show: true,
            lineStyle: {
              color: '#4B5563'
            }
          },
          axisLabel: { 
            show: true,
            color: '#4B5563',
            fontSize: 10
          }
        },
        yAxis: {
          axisLine: { show: true },
          axisLabel: { 
            show: true,
            formatter: '{value}%',
            color: '#4B5563',
            fontSize: 10
          },
          splitLine: { 
            show: false,
            lineStyle: {
              color: '#E5E7EB'
            }
          }
        }
      };
      
      // Apply base options to restore axis lines
      chart.setOption(baseOption);
      
      // Then regenerate the data based on current period with a slight delay
      setTimeout(() => {
        switch(this.period) {
          case 'day':
            this.generateDailyStats()
            break
          case 'week':
            this.generateWeeklyStats()
            break
          case 'month':
            this.generateMonthlyStats()
            break
        }
      }, 50);
    },
    
    handleUpload(courses) {
      const formattedCourses = courses.map(course => ({
        ...course,
        class_date: course.class_date || this.formatDateWithWeekday(new Date(course.date)),
        checked: false
      }))
      
      const existingCourses = this.courseEvents || []
      
      // Move duplication check to after formatting
      let duplicateCount = 0
      const newUniqueCourses = []
      
      formattedCourses.forEach(newCourse => {
        const isDuplicate = existingCourses.some(existingCourse => {
          const newDate = newCourse.class_date.split(/[ Âë®]/)[0]
          const existingDate = (existingCourse.class_date || existingCourse.date || '').split(/[ Âë®]/)[0]
          return newDate === existingDate && 
                 (existingCourse.class_time === newCourse.class_time || 
                  existingCourse.time === newCourse.class_time)
        })
        
        if (!isDuplicate) {
          newUniqueCourses.push(newCourse)
        } else {
          duplicateCount++
        }
      })
      
      if (newUniqueCourses.length > 0) {
        this.courseEvents = [...existingCourses, ...newUniqueCourses]
        this.updateStats()
        
        // Save to storage
        wx.setStorageSync('selected_courses', this.courseEvents)
        
        // Show success message with duplicate info if any
        const message = duplicateCount > 0 
          ? `ÊàêÂäüÂØºÂÖ•${newUniqueCourses.length}Èó®ËØæÁ®ãÔºå${duplicateCount}Èó®ËØæÁ®ãÂ∑≤Â≠òÂú®`
          : 'ËØæÁ®ãÊ∑ªÂä†ÊàêÂäü'
        
        wx.showToast({
          title: message,
          icon: 'success',
          duration: 2000
        })
      } else {
        wx.showToast({
          title: 'ÊâÄÈÄâËØæÁ®ãÂ∑≤Â≠òÂú®',
          icon: 'none',
          duration: 2000
        })
      }
    },
    
    handleCheckIn(event) {
      // Check if event is undefined first
      if (!event) {
        console.error('No event data received');
        return;
      }
      
      // Extract event data from different sources
      const actualEvent = event.detail || event;
      
      // Additional check to ensure actualEvent has the required properties
      if (!actualEvent || (!actualEvent.class_name && !actualEvent.title)) {
        console.error('Invalid event data:', actualEvent);
        return;
      }
      
      console.log('Check-in:', actualEvent.class_name || actualEvent.title);
      
      const index = this.courseEvents.findIndex(e => {
        // Normalize date/time properties
        const eDate = e.class_date || e.date || '';
        const eTime = e.class_time || e.time || '';
        const eName = e.class_name || e.title || '';
        const actualDate = actualEvent.class_date || actualEvent.date || '';
        const actualTime = actualEvent.class_time || actualEvent.time || '';
        const actualName = actualEvent.class_name || actualEvent.title || '';
        
        return eDate.split(/[ Âë®]/)[0] === actualDate.split(/[ Âë®]/)[0] && 
               eTime === actualTime &&
               eName === actualName;  // Add name matching
      });
      
      if (index !== -1) {
        // Check if already checked in
        if (this.courseEvents[index].checked) {
          wx.showToast({
            title: 'ËØæÁ®ãÂ∑≤ÊâìÂç°',
            icon: 'none',
            duration: 2000
          });
          return;
        }

        // Check if course is in the past
        if (this.isEventPast(actualEvent)) {
          wx.showToast({
            title: 'ËØæÁ®ãÂ∑≤ÁªìÊùü',
            icon: 'none',
            duration: 2000
          });
          return;
        }

        // Add check for course not started yet
        const now = new Date();
        const currentTime = now.getHours().toString().padStart(2, '0') + ':' + 
                           now.getMinutes().toString().padStart(2, '0');
        const [startTime] = (actualEvent.class_time || actualEvent.time || '').split('-');
        
        if (currentTime < startTime) {
          wx.showToast({
            title: 'ËØæÁ®ãÊú™ÂºÄÂßã',
            icon: 'none',
            duration: 2000
          });
          return;
        }
        
        this.courseEvents[index].checked = true;
        this.updateStats();
        wx.setStorageSync('selected_courses', this.courseEvents);
        
        wx.showToast({
          title: 'ÊâìÂç°ÊàêÂäü',
          icon: 'success',
          duration: 2000
        });
      } else {
        console.error('Course not found:', actualEvent);
        wx.showToast({
          title: 'ÊâìÂç°Â§±Ë¥•',
          icon: 'none',
          duration: 2000
        });
      }
    },
    
    updateStats() {
      this.stats.totalCourses = this.courseEvents.length  
      this.stats.completedCourses = this.courseEvents.filter(e => e.checked).length
    },

    formatDateWithWeekday(date) {
      const month = String(date.getMonth() + 1).padStart(2, '0')
      const day = String(date.getDate()).padStart(2, '0')
      const weekDay = ['Êó•', '‰∏Ä', '‰∫å', '‰∏â', 'Âõõ', '‰∫î', 'ÂÖ≠'][date.getDay()]
      return `${month}.${day} Âë®${weekDay}`
    },

    isEventPast(event) {
      const now = new Date()
      const today = this.formatDateToChineseFormat(now)
      const eventDateStr = event.class_date || event.date || ''
      const eventDate = eventDateStr.slice(0, 5)
      
      // If we're viewing a past date, all events should be considered past
      if (this.selectedDate && this.selectedDate < today) {
        return true
      }
      
      // If we're viewing a future date, no events should be considered past
      if (this.selectedDate && this.selectedDate > today) {
        return false
      }
      
      // For today or when no date is selected (which defaults to today)
      if (eventDate < today) return true
      if (eventDate === today) {
        const [endTime] = (event.class_time || event.time || '').split('-').slice(-1)
        const currentTime = now.getHours().toString().padStart(2, '0') + ':' + 
                          now.getMinutes().toString().padStart(2, '0')
        return endTime < currentTime
      }
      return false
    },

    canCheckIn(event) {
      const now = new Date()
      const today = this.formatDateToChineseFormat(now)
      const eventDateStr = event.class_date || event.date || ''
      const eventDate = eventDateStr.split(/[ Âë®]/)[0]
      
      if (eventDate !== today) return false
      
      const [endTime] = (event.class_time || event.time || '').split('-').slice(-1)
      const currentTime = now.getHours().toString().padStart(2, '0') + ':' + 
                         now.getMinutes().toString().padStart(2, '0')
      return currentTime <= endTime
    },

    onCourseItemTap(e) {
      // Get the index from the data attribute
      const index = e.currentTarget.dataset.item;
      
      // Get the item from todayCourses using the index
      const item = this.todayCourses[index];
      
      if (item) {
        console.log('Course item tapped:', item);
        this.handleCheckIn(item);
      } else {
        console.error('No item found at index:', index);
      }
    },

    handleDaySelect(date) {
      console.log('Day selected:', date);
      
      // Update the selected date
      if (date === this.selectedDate) {
        // If clicking the same date again, reset to today
        this.selectedDate = null;
      } else {
        this.selectedDate = date;
      }
    },

    handlePopupVisibilityChange(isVisible) {
      this.isPopupVisible = isVisible;
      
      // Get the chart instance
      const chart = getApp().globalData.chart;
      if (!chart) return;
      
      if (isVisible) {
        // When popup is visible, clear the chart data and hide axis lines
        chart.setOption({
          xAxis: {
            axisLine: { show: false },
            axisLabel: { show: false },
            data: []
          },
          yAxis: {
            axisLine: { show: false },
            axisLabel: { show: false },
            splitLine: { show: false }
          },
          series: [{
            data: []
          }]
        });
      } else {
        // When popup is hidden, restore the chart data and axis lines
        const baseOption = {
          xAxis: {
            axisLine: { 
              show: true,
              lineStyle: {
                color: '#4B5563'
              }
            },
            axisLabel: { 
              show: true,
              color: '#4B5563',
              fontSize: 10
            }
          },
          yAxis: {
            axisLine: { show: true },
            axisLabel: { 
              show: true,
              formatter: '{value}%',
              color: '#4B5563',
              fontSize: 10
            },
            splitLine: { 
              show: false,
              lineStyle: {
                color: '#E5E7EB'
              }
            }
          }
        };
        
        // Apply base options to restore axis lines
        chart.setOption(baseOption);
        
        // Then regenerate the data based on current period with a slight delay
        setTimeout(() => {
          switch(this.period) {
            case 'day':
              this.generateDailyStats()
              break
            case 'week':
              this.generateWeeklyStats()
              break
            case 'month':
              this.generateMonthlyStats()
              break
          }
        }, 50);
      }
    },

    setPeriod(period) {
      this.period = period;
      if (!getApp().globalData.chart) {
        console.warn('Chart not initialized yet');
        return;
      }
      switch(period) {
        case 'day':
          this.periodTitle = 'ÊúÄËøë7Â§©ÊâìÂç°Áéá'
          this.generateDailyStats()
          break
        case 'week':
          this.periodTitle = 'ÊúÄËøë4Âë®ÊâìÂç°Áéá'
          this.generateWeeklyStats()
          break
        case 'month':
          this.periodTitle = 'ÊúÄËøë6‰∏™ÊúàÊâìÂç°Áéá'
          this.generateMonthlyStats()
          break
      }
    },

    updateChartData(data) {
      const chart = getApp().globalData.chart;
      if (!chart) return;
      
      const option = {
        xAxis: {
          data: data.map(item => item.label),
          axisLine: { 
            show: true,
            lineStyle: {
              color: '#4B5563'
            }
          },
          axisLabel: { 
            show: true,
            color: '#4B5563',
            fontSize: 10
          }
        },
        yAxis: {
          axisLine: { show: true },
          axisLabel: { 
            show: true,
            formatter: '{value}%',
            color: '#4B5563',
            fontSize: 10
          }
        },
        series: [{
          data: data.map(item => item.value)
        }]
      };
      
      chart.setOption(option);
    },

    generateDailyStats() {
      const days = 7
      const now = new Date()
      const stats = []
      
      for (let i = days - 1; i >= 0; i--) {
        const date = new Date(now)
        date.setDate(date.getDate() - i)
        const dateStr = this.formatDateToChineseFormat(date)
        
        const dayEvents = this.courseEvents.filter(event => {
          const eventDate = (event.class_date || event.date || '').slice(0, 5)
          return eventDate === dateStr
        })
        
        const total = dayEvents.length
        const completed = dayEvents.filter(e => e.checked).length
        const rate = total ? Math.round((completed / total) * 100) : 0
        
        stats.push({
          label: dateStr.split('.')[1],
          value: rate
        })
      }
      
      this.updateChartData(stats)
    },

    generateWeeklyStats() {
      const weeks = 4
      const stats = []
      const now = new Date()
      
      for (let i = weeks - 1; i >= 0; i--) {
        const weekStart = new Date(now)
        // Set to the beginning of the current week (Sunday)
        const dayOfWeek = weekStart.getDay()
        weekStart.setDate(weekStart.getDate() - dayOfWeek - (i * 7))
        const weekEnd = new Date(weekStart)
        weekEnd.setDate(weekEnd.getDate() + 6)
        
        // Format dates for display in console
        const weekStartStr = `${weekStart.getMonth() + 1}/${weekStart.getDate()}`
        const weekEndStr = `${weekEnd.getMonth() + 1}/${weekEnd.getDate()}`
        
        const weekEvents = this.courseEvents.filter(event => {
          const eventDateStr = (event.class_date || event.date || '').slice(0, 5)
          const [month, day] = eventDateStr.split('.')
          // Create a proper date object
          let eventDate = new Date(now.getFullYear(), parseInt(month) - 1, parseInt(day))
          
          // Handle year boundary (if month is greater than current month, it's from last year)
          if (parseInt(month) > now.getMonth() + 1 && weekStart.getMonth() < parseInt(month) - 1) {
            eventDate = new Date(now.getFullYear() - 1, parseInt(month) - 1, parseInt(day))
          }
          
          return eventDate >= weekStart && eventDate <= weekEnd
        })
        
        const total = weekEvents.length
        const completed = weekEvents.filter(e => e.checked).length
        const rate = total ? Math.round((completed / total) * 100) : 0
        
        stats.push({
          label: `${weekStartStr}-${weekEndStr}`,
          value: rate
        })
      }
      
      this.updateChartData(stats)
    },

    generateMonthlyStats() {
      const months = 6
      const stats = []
      const now = new Date()
      
      for (let i = months - 1; i >= 0; i--) {
        const monthStart = new Date(now.getFullYear(), now.getMonth() - i, 1)
        const monthEnd = new Date(now.getFullYear(), now.getMonth() - i + 1, 0)
        
        const monthEvents = this.courseEvents.filter(event => {
          const eventDateStr = (event.class_date || event.date || '').slice(0, 5)
          const [month, day] = eventDateStr.split('.')
          // Create a proper date object
          let eventDate = new Date(now.getFullYear(), parseInt(month) - 1, parseInt(day))
          
          // Handle year boundary (if month is greater than current month, it's from last year)
          if (parseInt(month) > now.getMonth() + 1 && monthStart.getMonth() < parseInt(month) - 1) {
            eventDate = new Date(now.getFullYear() - 1, parseInt(month) - 1, parseInt(day))
          }
          
          return eventDate >= monthStart && eventDate <= monthEnd
        })
        
        const total = monthEvents.length
        const completed = monthEvents.filter(e => e.checked).length
        const rate = total ? Math.round((completed / total) * 100) : 0
        
        stats.push({
          label: `${monthStart.getMonth() + 1}Êúà`,
          value: rate
        })
      }
      
      this.updateChartData(stats)
    },
  },

  onLoad() {
    // Initialize global chart storage
    if (!getApp().globalData) {
      getApp().globalData = {};
    }
    const storedCourses = wx.getStorageSync('selected_courses') || []
    this.courseEvents = storedCourses
    this.selectedDate = null
    this.updateStats()
    
    // Delay initial chart data generation to ensure chart is ready
    setTimeout(() => {
      this.generateDailyStats(); // Initialize with daily stats
    }, 500);
  }
})
</script>

<config>
{
  usingComponents: {
    "image-upload-dialog": "../components/ImageUploadDialog",
    "calendar": "../components/Calendar",
    "ec-canvas": "../ec-canvas/ec-canvas",
    "course-confirm-dialog": "../components/CourseConfirmDialog"
  },
  navigationBarTitleText: 'ÂÅ•Â∫∑ËØæÁ®ãÁÆ°ÁêÜ'
}
</config> 